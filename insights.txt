Bij het lezen en nadenken over de opdracht kwam de volgende vraag als eerste naar voren:
In hoeverre wil ik de performance van de individuele methodes optimalizeren?
Afhankelijk van de methode die aangeroepen wordt kan het namelijk voor die individuele methode beter zijn om de text op een andere manier op te slaan/te verwerken.

Als je wil weten hoe vaak een specifiek woord voorkomt hoef je de text alleen maar door te zoeken op dat specifieke woord,
terwijl als je het meest voorkomende (een lijst van meest voorkomende) woorden wil opleveren kan dit een heel andere oplossing opleveren als je daarvan de performance optimaliseert.

Ik heb gekozen om te focussen op een manier van het document opslaan om aan al deze vragen te kunnen voldoen.
Dit zorgt meestal voor code die logischer te volgen is, en makkelijker te onderhouden is.

Verder zou ik me kunnen voorstellen dat iemand meerdere vragen over dezelfde text zou willen stellen en dus in plaats van een methode
int calculateHighestFrequency(String text); we een class zouden willen maken met als class parameter (String text) en als methode int giveHighestFrequency.
Dit zou een logische manier zijn om meerdere vragen te kunnen stellen over dezelfde text zonder deze elke keer op nieuw te hoeven parsen.

Dit zou ook kunnen door een cache bij te houden van al geparste texten, maar dan moet je als nog op een manier vaststellen dat de text voor de huidige opvraag dezelfde is als de vorige
wat O(n) runtime heeft, tenzij hetzelfde object wordt meegeleverd.
Dus alleen als het opnieuw parsen van dezelfde text langzamer is dan O(n) zou dit toegevoegde waarde hebben.

De opdracht vraagt alleen om woorden te maken van een sequence van characters tussen a en z of A en Z.
Dit is niet per se makkelijker dan ook de letters ä, ó etc ook te includen door als regex te zoeken op WORD_REGEXP = "\\p{L}+",
maar om aan de opdracht te voldoen heb ik deze vervangen met WORD_REGEXP = "\\p{L}+"